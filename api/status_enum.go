// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.4
// Revision: 9793817a5b65af692253b8bc6081fe69a4b6985f
// Build Date: 2022-12-21T19:29:50Z
// Built By: goreleaser

package api

import (
	"fmt"
	"strings"
)

const (
	// LessonStatusInitialized is a LessonStatus of type Initialized.
	LessonStatusInitialized LessonStatus = iota
	// LessonStatusProgressed is a LessonStatus of type Progressed.
	LessonStatusProgressed
)

var ErrInvalidLessonStatus = fmt.Errorf("not a valid LessonStatus, try [%s]", strings.Join(_LessonStatusNames, ", "))

const _LessonStatusName = "InitializedProgressed"

var _LessonStatusNames = []string{
	_LessonStatusName[0:11],
	_LessonStatusName[11:21],
}

// LessonStatusNames returns a list of possible string values of LessonStatus.
func LessonStatusNames() []string {
	tmp := make([]string, len(_LessonStatusNames))
	copy(tmp, _LessonStatusNames)
	return tmp
}

var _LessonStatusMap = map[LessonStatus]string{
	LessonStatusInitialized: _LessonStatusName[0:11],
	LessonStatusProgressed:  _LessonStatusName[11:21],
}

// String implements the Stringer interface.
func (x LessonStatus) String() string {
	if str, ok := _LessonStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LessonStatus(%d)", x)
}

var _LessonStatusValue = map[string]LessonStatus{
	_LessonStatusName[0:11]:                   LessonStatusInitialized,
	strings.ToLower(_LessonStatusName[0:11]):  LessonStatusInitialized,
	_LessonStatusName[11:21]:                  LessonStatusProgressed,
	strings.ToLower(_LessonStatusName[11:21]): LessonStatusProgressed,
}

// ParseLessonStatus attempts to convert a string to a LessonStatus.
func ParseLessonStatus(name string) (LessonStatus, error) {
	if x, ok := _LessonStatusValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _LessonStatusValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return LessonStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidLessonStatus)
}

// Set implements the Golang flag.Value interface func.
func (x *LessonStatus) Set(val string) error {
	v, err := ParseLessonStatus(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *LessonStatus) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *LessonStatus) Type() string {
	return "LessonStatus"
}
